import { expectType } from 'tsd';

expectType<SightLayer | undefined>(SightLayer.instance);
expectType<SightLayer.LayerOptions>(SightLayer.layerOptions);
expectType<'sight'>(SightLayer.layerOptions.name);
expectType<number>(SightLayer.EXACT_VISION_THRESHOLD);
expectType<number>(SightLayer.FOG_COMMIT_THRESHOLD);

const layer = new SightLayer();
expectType<SightLayer.LayerOptions>(layer.options);
expectType<'sight'>(layer.options.name);
expectType<FogExploration | null>(layer.exploration);
expectType<foundry.utils.Collection<PointSource>>(layer.sources);
expectType<PIXI.Graphics>(layer.los);
expectType<() => void>(layer.debounceSaveFog);
expectType<boolean>(layer.tokenVision);
expectType<Promise<SightLayer>>(layer.tearDown());
expectType<Promise<void>>(layer.initialize());
expectType<Promise<void>>(layer.initializeFog());
expectType<Promise<void>>(layer.initializeSources());
expectType<Promise<SightLayer>>(layer.draw());
expectType<void>(layer.refresh());
expectType<void>(layer.refresh({ forceUpdateFog: true }));
expectType<void>(layer.refresh({ noUpdateFog: true }));
expectType<void>(layer.refresh({ forceUpdateFog: false, noUpdateFog: false }));
expectType<void>(layer.restrictVisibility());
expectType<boolean>(layer.testVisibility({ x: 1500, y: 800 }));
expectType<boolean>(layer.testVisibility(new PIXI.Point(1500, 800)));
expectType<boolean>(layer.testVisibility({ x: 1500, y: 800 }, {}));
expectType<boolean>(layer.testVisibility({ x: 1500, y: 800 }, { tolerance: 100 }));
expectType<boolean>(layer.testVisibility({ x: 1500, y: 800 }, { object: new PIXI.DisplayObject() }));
expectType<void>(layer.commitFog());
expectType<Promise<PIXI.Texture | void>>(layer.loadFog());
expectType<Promise<void>>(layer.resetFog());
expectType<Promise<void>>(layer.saveFog());
expectType<void>(layer.updateFog(new LightSource(new AmbientLight(new AmbientLightDocument()))));
expectType<void>(layer.updateFog(new LightSource(new AmbientLight(new AmbientLightDocument())), true));
